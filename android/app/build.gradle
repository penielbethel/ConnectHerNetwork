apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. Default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraBundlerArgs = []

    /* Hermes Commands */
    //   The hermes command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.connecthermobile"
    defaultConfig {
        applicationId "com.connecthermobile"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation("com.facebook.react:flipper-integration")

    // Ensure AppCompat is available for AppCompat theme usage
    implementation("androidx.appcompat:appcompat:1.7.0")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

task fixCMakePaths {
    doLast {
        def cmakeFile = file("build/generated/rncli/src/main/jni/Android-rncli.cmake")
        if (cmakeFile.exists()) {
            println "Fixing CMake paths in ${cmakeFile.absolutePath}"
            def lines = cmakeFile.readLines()
            def fixedLines = []
            def fixCount = 0
            
            lines.each { line ->
                if (line.matches(/^add_subdirectory\([^"]+\s+\w+\)$/) && line.contains(' ')) {
                    def matcher = line =~ /^add_subdirectory\((.+?)\s+(\w+)\)$/
                    if (matcher.find()) {
                        def path = matcher.group(1)
                        def target = matcher.group(2)
                        if (path.contains(' ') && !path.startsWith('"')) {
                            def fixedLine = "add_subdirectory(\"${path}\" ${target})"
                            fixedLines.add(fixedLine)
                            println "Fixed: ${line} -> ${fixedLine}"
                            fixCount++
                        } else {
                            fixedLines.add(line)
                        }
                    } else {
                        fixedLines.add(line)
                    }
                } else {
                    fixedLines.add(line)
                }
            }
            
            if (fixCount > 0) {
                cmakeFile.text = fixedLines.join('\n') + '\n'
                println "Fixed ${fixCount} CMake path issues"
            } else {
                println "No CMake path fixes needed"
            }
        } else {
            println "CMake file not found: ${cmakeFile.absolutePath}"
        }
    }
}

// Wire up fixCMakePaths safely across AGP versions by reacting to task creation
tasks.whenTaskAdded { task ->
    try {
        if (task.name.contains('generateJsonModel') || task.name.contains('Cxx')) {
            task.finalizedBy(fixCMakePaths)
        }
        if (task.name.startsWith('configureCMake')) {
            task.dependsOn(fixCMakePaths)
        }
    } catch (Throwable ignored) {
        // Avoid configuration failure if wiring cannot be applied
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

// Ensure react-native-vector-icons fonts are bundled into the app
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"